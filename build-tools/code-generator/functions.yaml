# Copyright (c) 2017 Sony Corporation. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# DO NOT EDIT THIS FILE BY HAND
# THIS FILE IS GENERATED FROM NNABLA.
#

Neural Network Layer:
  Affine:
    snake_name: affine
    inputs:
      x: {}
      weight:
        parameter: true
      bias:
        optional: true
        parameter: true
    arguments:
      base_axis:
        type: int64
        default: '1'
    outputs:
      y: {}
    function_ids:
      i: 0
    uniq_name: Affine_i
    id: 0
  Convolution:
    snake_name: convolution
    inputs:
      x: {}
      weight:
        parameter: true
      bias:
        optional: true
        parameter: true
    arguments:
      base_axis:
        type: int64
        default: '1'
      pad:
        type: Shape
        default: (0,) * (len(x.shape) - (base_axis+1))
      stride:
        type: Shape
        default: (1,) * (len(x.shape) - (base_axis+1))
      dilation:
        type: Shape
        default: (1,) * (len(x.shape) - (base_axis+1))
      group:
        type: int64
        default: '1'
    outputs:
      y: {}
    function_ids:
      iiIiIiIi: 1
    uniq_name: Convolution_iiIiIiIi
    id: 1
  DepthwiseConvolution:
    snake_name: depthwise_convolution
    inputs:
      x: {}
      weight:
        parameter: true
      bias:
        optional: true
        parameter: true
    arguments:
      base_axis:
        type: int64
        default: '1'
      pad:
        type: Shape
        default: (0,) * (len(x.shape) - (base_axis+1))
      stride:
        type: Shape
        default: (1,) * (len(x.shape) - (base_axis+1))
      dilation:
        type: Shape
        default: (1,) * (len(x.shape) - (base_axis+1))
      multiplier:
        type: int64
        default: '1'
    outputs:
      y: {}
    function_ids:
      iiIiIiIi: 2
    uniq_name: DepthwiseConvolution_iiIiIiIi
    id: 2
  Deconvolution:
    snake_name: deconvolution
    inputs:
      x: {}
      weight:
        parameter: true
      bias:
        optional: true
        parameter: true
    arguments:
      base_axis:
        type: int64
        default: '1'
      pad:
        type: Shape
        default: (0,) * (len(x.shape) - (base_axis+1))
      stride:
        type: Shape
        default: (1,) * (len(x.shape) - (base_axis+1))
      dilation:
        type: Shape
        default: (1,) * (len(x.shape) - (base_axis+1))
      group:
        type: int64
        default: '1'
    outputs:
      y: {}
    function_ids:
      iiIiIiIi: 3
    uniq_name: Deconvolution_iiIiIiIi
    id: 3
  DepthwiseDeconvolution:
    snake_name: depthwise_deconvolution
    inputs:
      x: {}
      weight:
        parameter: true
      bias:
        optional: true
        parameter: true
    arguments:
      base_axis:
        type: int64
        default: '1'
      pad:
        type: Shape
        default: (0,) * (len(x.shape) - (base_axis+1))
      stride:
        type: Shape
        default: (1,) * (len(x.shape) - (base_axis+1))
      dilation:
        type: Shape
        default: (1,) * (len(x.shape) - (base_axis+1))
      divisor:
        type: int64
        default: '1'
    outputs:
      y: {}
    function_ids:
      iiIiIiIi: 4
    uniq_name: DepthwiseDeconvolution_iiIiIiIi
    id: 4
  MaxPooling:
    snake_name: max_pooling
    inputs:
      x: {}
    arguments:
      kernel:
        type: Shape
      stride:
        type: Shape
        default: kernel
      ignore_border:
        type: bool
        default: 'True'
      pad:
        type: Shape
        default: (0,) * len(kernel)
    outputs:
      y: {}
    function_ids:
      iIiIBiI: 5
    uniq_name: MaxPooling_iIiIBiI
    id: 5
  AveragePooling:
    snake_name: average_pooling
    inputs:
      x: {}
    arguments:
      kernel:
        type: Shape
      stride:
        type: Shape
        default: kernel
      ignore_border:
        type: bool
        default: 'True'
      pad:
        type: Shape
        default: (0,) * len(kernel)
      including_pad:
        type: bool
        default: 'True'
    outputs:
      y: {}
    function_ids:
      iIiIBiIB: 6
    uniq_name: AveragePooling_iIiIBiIB
    id: 6
  GlobalAveragePooling:
    snake_name: global_average_pooling
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 7
    uniq_name: GlobalAveragePooling
    id: 7
  SumPooling:
    snake_name: sum_pooling
    inputs:
      x: {}
    arguments:
      kernel:
        type: Shape
      stride:
        type: Shape
        default: kernel
      ignore_border:
        type: bool
        default: 'True'
      pad:
        type: Shape
        default: (0,) * len(kernel)
    outputs:
      y: {}
    function_ids:
      iIiIBiI: 8
    uniq_name: SumPooling_iIiIBiI
    id: 8
  Unpooling:
    snake_name: unpooling
    inputs:
      x: {}
    arguments:
      kernel:
        type: Shape
    outputs:
      y: {}
    function_ids:
      iI: 9
    uniq_name: Unpooling_iI
    id: 9
  Embed:
    snake_name: embed
    inputs:
      x0:
        template: TI
      w:
        parameter: true
    outputs:
      y: {}
    function_ids:
      Empty: 10
    uniq_name: Embed
    id: 10
Neural Network Activation Functions:
  Sigmoid:
    snake_name: sigmoid
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 11
    uniq_name: Sigmoid
    id: 11
  Swish:
    snake_name: swish
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 12
    uniq_name: Swish
    id: 12
  Tanh:
    snake_name: tanh
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 13
    uniq_name: Tanh
    id: 13
  ReLU:
    snake_name: relu
    inputs:
      x: {}
    arguments:
      inplace:
        type: bool
        default: 'False'
    outputs:
      y: {}
    function_ids:
      B: 14
    uniq_name: ReLU_B
    id: 14
  LeakyReLU:
    snake_name: leaky_relu
    inputs:
      x: {}
    arguments:
      alpha:
        type: float
        default: '0.1'
      inplace:
        type: bool
        default: 'False'
    outputs:
      y: {}
    function_ids:
      f: 15
      fB: 128
    uniq_name: LeakyReLU_fB
    id: 128
  Softmax:
    snake_name: softmax
    inputs:
      x: {}
    arguments:
      axis:
        type: int64
        default: len(x.shape) - 1
    outputs:
      y: {}
    function_ids:
      i: 16
    uniq_name: Softmax_i
    id: 16
  ELU:
    snake_name: elu
    inputs:
      x: {}
    arguments:
      alpha:
        type: double
        default: '1.0'
    outputs:
      y: {}
    function_ids:
      f: 17
    uniq_name: ELU_f
    id: 17
  SELU:
    snake_name: selu
    inputs:
      x: {}
    arguments:
      scale:
        type: double
        default: '1.05070098735548'
      alpha:
        type: double
        default: '1.673263242354377'
    outputs:
      y: {}
    function_ids:
      ff: 18
    uniq_name: SELU_ff
    id: 18
  CReLU:
    snake_name: crelu
    inputs:
      x: {}
    arguments:
      axis:
        type: int64
        default: '1'
    outputs:
      y: {}
    function_ids:
      i: 19
    uniq_name: CReLU_i
    id: 19
  CELU:
    snake_name: celu
    inputs:
      x: {}
    arguments:
      alpha:
        type: double
        default: '1.0'
      axis:
        type: int64
        default: '1'
    outputs:
      y: {}
    function_ids:
      fi: 20
    uniq_name: CELU_fi
    id: 20
  PReLU:
    snake_name: prelu
    inputs:
      x0: {}
      x1: {}
    arguments:
      base_axis:
        type: int64
        default: '1'
    outputs:
      y: {}
    function_ids:
      i: 21
    uniq_name: PReLU_i
    id: 21
Normalization:
  BatchNormalization:
    snake_name: batch_normalization
    inputs:
      x: {}
      beta: {}
      gamma: {}
      mean: {}
      variance: {}
    arguments:
      axes:
        type: repeated int64
        default: (1,)
      decay_rate:
        type: float
        default: '0.9'
      eps:
        type: float
        default: 1e-05
      batch_stat:
        type: bool
        default: 'True'
    outputs:
      y: {}
    function_ids:
      iIffB: 22
    uniq_name: BatchNormalization_iIffB
    id: 22
  MeanSubtraction:
    snake_name: mean_subtraction
    inputs:
      x: {}
      rmean: {}
      t: {}
    arguments:
      base_axis:
        type: int64
        default: '1'
      update_running_mean:
        type: bool
        default: 'True'
    outputs:
      y: {}
    function_ids:
      iB: 23
    uniq_name: MeanSubtraction_iB
    id: 23
  ClipGradByValue:
    snake_name: clip_grad_by_value
    inputs:
      x: {}
      min: {}
      max: {}
    outputs:
      y: {}
    function_ids:
      Empty: 121
    uniq_name: ClipGradByValue
    id: 121
  ClipGradByNorm:
    snake_name: clip_grad_by_norm
    inputs:
      x: {}
    arguments:
      clip_norm:
        type: float
        default: 1.0
      axes:
        type: repeated int64
        default: range(x.ndim)
    outputs:
      y: {}
    function_ids:
      fiI: 122
    uniq_name: ClipGradByNorm_fiI
    id: 122
Reduction:
  Sum:
    snake_name: sum
    inputs:
      x: {}
    arguments:
      axes:
        type: repeated int64
        default: range(x.ndim)
      keep_dims:
        type: bool
        default: 'False'
    outputs:
      y: {}
    function_ids:
      iIB: 24
    uniq_name: Sum_iIB
    id: 24
  Mean:
    snake_name: mean
    inputs:
      x: {}
    arguments:
      axes:
        type: repeated int64
        default: range(x.ndim)
      keep_dims:
        type: bool
        default: 'False'
    outputs:
      y: {}
    function_ids:
      iIB: 25
    uniq_name: Mean_iIB
    id: 25
  Max:
    snake_name: max
    inputs:
      x: {}
    arguments:
      axes:
        type: repeated int64
        default: range(x.ndim)
      keep_dims:
        type: bool
        default: 'False'
      with_index:
        type: bool
        default: 'False'
      only_index:
        type: bool
        default: 'False'
    outputs:
      y: {}
    function_ids:
      iIB: 26
      iIBBB: 132
    uniq_name: Max_iIBBB
    id: 132
  Min:
    snake_name: min
    inputs:
      x: {}
    arguments:
      axes:
        type: repeated int64
        default: range(x.ndim)
      keep_dims:
        type: bool
        default: 'False'
      with_index:
        type: bool
        default: 'False'
      only_index:
        type: bool
        default: 'False'
    outputs:
      y: {}
    function_ids:
      iIB: 27
      iIBBB: 130
    uniq_name: Min_iIBBB
    id: 130
  Prod:
    snake_name: prod
    inputs:
      x: {}
    arguments:
      axes:
        type: repeated int64
        default: range(x.ndim)
      keep_dims:
        type: bool
        default: 'False'
    outputs:
      y: {}
    function_ids:
      iIB: 28
    uniq_name: Prod_iIB
    id: 28
  ReduceSum:
    snake_name: reduce_sum
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 29
    uniq_name: ReduceSum
    id: 29
  ReduceMean:
    snake_name: reduce_mean
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 30
    uniq_name: ReduceMean
    id: 30
Arithmetic:
  Add2:
    snake_name: add2
    inputs:
      x0: {}
      x1: {}
    arguments:
      inplace:
        type: bool
        default: 'False'
    outputs:
      y: {}
    function_ids:
      B: 31
    uniq_name: Add2_B
    id: 31
  BcAdd2:
    snake_name: bc_add2
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    function_ids:
      Empty: 32
    uniq_name: BcAdd2
    id: 32
  Sub2:
    snake_name: sub2
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    function_ids:
      Empty: 33
    uniq_name: Sub2
    id: 33
  Mul2:
    snake_name: mul2
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    function_ids:
      Empty: 34
    uniq_name: Mul2
    id: 34
  Div2:
    snake_name: div2
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    function_ids:
      Empty: 35
    uniq_name: Div2
    id: 35
  Pow2:
    snake_name: pow2
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    function_ids:
      Empty: 36
    uniq_name: Pow2
    id: 36
  AddScalar:
    snake_name: add_scalar
    inputs:
      x: {}
    arguments:
      val:
        type: double
        default: '1'
    outputs:
      y: {}
    function_ids:
      f: 37
    uniq_name: AddScalar_f
    id: 37
  MulScalar:
    snake_name: mul_scalar
    inputs:
      x: {}
    arguments:
      val:
        type: double
        default: '1'
    outputs:
      y: {}
    function_ids:
      f: 38
    uniq_name: MulScalar_f
    id: 38
  PowScalar:
    snake_name: pow_scalar
    inputs:
      x: {}
    arguments:
      val:
        type: double
        default: '1'
    outputs:
      y: {}
    function_ids:
      f: 39
    uniq_name: PowScalar_f
    id: 39
  RSubScalar:
    snake_name: r_sub_scalar
    inputs:
      x: {}
    arguments:
      val:
        type: double
        default: '1'
    outputs:
      y: {}
    function_ids:
      f: 40
    uniq_name: RSubScalar_f
    id: 40
  RDivScalar:
    snake_name: r_div_scalar
    inputs:
      x: {}
    arguments:
      val:
        type: double
        default: '1'
    outputs:
      y: {}
    function_ids:
      f: 41
    uniq_name: RDivScalar_f
    id: 41
  RPowScalar:
    snake_name: r_pow_scalar
    inputs:
      x: {}
    arguments:
      val:
        type: double
        default: '1'
    outputs:
      y: {}
    function_ids:
      f: 42
    uniq_name: RPowScalar_f
    id: 42
Logical:
  Sign:
    snake_name: sign
    inputs:
      x: {}
    arguments:
      alpha:
        type: float
        default: '0.0'
    outputs:
      y: {}
    function_ids:
      f: 43
    uniq_name: Sign_f
    id: 43
  Minimum2:
    snake_name: minimum2
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    function_ids:
      Empty: 44
    uniq_name: Minimum2
    id: 44
  Maximum2:
    snake_name: maximum2
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    function_ids:
      Empty: 45
    uniq_name: Maximum2
    id: 45
  MinimumScalar:
    snake_name: minimum_scalar
    inputs:
      x: {}
    arguments:
      val:
        type: double
        default: '1.0'
    outputs:
      y: {}
    function_ids:
      f: 46
    uniq_name: MinimumScalar_f
    id: 46
  MaximumScalar:
    snake_name: maximum_scalar
    inputs:
      x: {}
    arguments:
      val:
        type: double
        default: '1.0'
    outputs:
      y: {}
    function_ids:
      f: 47
    uniq_name: MaximumScalar_f
    id: 47
  LogicalAnd:
    snake_name: logical_and
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    function_ids:
      Empty: 48
    uniq_name: LogicalAnd
    id: 48
  LogicalOr:
    snake_name: logical_or
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    function_ids:
      Empty: 49
    uniq_name: LogicalOr
    id: 49
  LogicalXor:
    snake_name: logical_xor
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    function_ids:
      Empty: 50
    uniq_name: LogicalXor
    id: 50
  Equal:
    snake_name: equal
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    function_ids:
      Empty: 51
    uniq_name: Equal
    id: 51
  NotEqual:
    snake_name: not_equal
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    function_ids:
      Empty: 52
    uniq_name: NotEqual
    id: 52
  GreaterEqual:
    snake_name: greater_equal
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    function_ids:
      Empty: 53
    uniq_name: GreaterEqual
    id: 53
  Greater:
    snake_name: greater
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    function_ids:
      Empty: 54
    uniq_name: Greater
    id: 54
  LessEqual:
    snake_name: less_equal
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    function_ids:
      Empty: 55
    uniq_name: LessEqual
    id: 55
  Less:
    snake_name: less
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    function_ids:
      Empty: 56
    uniq_name: Less
    id: 56
  LogicalAndScalar:
    snake_name: logical_and_scalar
    inputs:
      x0: {}
    arguments:
      val:
        type: bool
    outputs:
      y: {}
    function_ids:
      B: 57
    uniq_name: LogicalAndScalar_B
    id: 57
  LogicalOrScalar:
    snake_name: logical_or_scalar
    inputs:
      x0: {}
    arguments:
      val:
        type: bool
    outputs:
      y: {}
    function_ids:
      B: 58
    uniq_name: LogicalOrScalar_B
    id: 58
  LogicalXorScalar:
    snake_name: logical_xor_scalar
    inputs:
      x0: {}
    arguments:
      val:
        type: bool
    outputs:
      y: {}
    function_ids:
      B: 59
    uniq_name: LogicalXorScalar_B
    id: 59
  EqualScalar:
    snake_name: equal_scalar
    inputs:
      x0: {}
    arguments:
      val:
        type: double
        default: '1'
    outputs:
      y: {}
    function_ids:
      f: 60
    uniq_name: EqualScalar_f
    id: 60
  NotEqualScalar:
    snake_name: not_equal_scalar
    inputs:
      x0: {}
    arguments:
      val:
        type: double
        default: '1'
    outputs:
      y: {}
    function_ids:
      f: 61
    uniq_name: NotEqualScalar_f
    id: 61
  GreaterEqualScalar:
    snake_name: greater_equal_scalar
    inputs:
      x0: {}
    arguments:
      val:
        type: double
        default: '1'
    outputs:
      y: {}
    function_ids:
      f: 62
    uniq_name: GreaterEqualScalar_f
    id: 62
  GreaterScalar:
    snake_name: greater_scalar
    inputs:
      x0: {}
    arguments:
      val:
        type: double
        default: '1'
    outputs:
      y: {}
    function_ids:
      f: 63
    uniq_name: GreaterScalar_f
    id: 63
  LessEqualScalar:
    snake_name: less_equal_scalar
    inputs:
      x0: {}
    arguments:
      val:
        type: double
        default: '1'
    outputs:
      y: {}
    function_ids:
      f: 64
    uniq_name: LessEqualScalar_f
    id: 64
  LessScalar:
    snake_name: less_scalar
    inputs:
      x0: {}
    arguments:
      val:
        type: double
        default: '1'
    outputs:
      y: {}
    function_ids:
      f: 65
    uniq_name: LessScalar_f
    id: 65
  LogicalNot:
    snake_name: logical_not
    inputs:
      x0: {}
    outputs:
      y: {}
    function_ids:
      Empty: 66
    uniq_name: LogicalNot
    id: 66
Math:
  Constant:
    snake_name: constant
    inputs: {}
    arguments:
      val:
        type: float
        default: '0'
      shape:
        type: Shape
        default: '[]'
    outputs:
      y: {}
    function_ids:
      fiI: 67
    uniq_name: Constant_fiI
    id: 67
  Arange:
    snake_name: arange
    inputs: {}
    arguments:
      start:
        type: float
      stop:
        type: float
      step:
        type: float
        default: '1'
    outputs:
      y: {}
    function_ids:
      fff: 131
    uniq_name: Arange_fff
    id: 131
  Abs:
    snake_name: abs
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 68
    uniq_name: Abs
    id: 68
  Exp:
    snake_name: exp
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 69
    uniq_name: Exp
    id: 69
  Log:
    snake_name: log
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 70
    uniq_name: Log
    id: 70
  Identity:
    snake_name: identity
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 71
    uniq_name: Identity
    id: 71
  BatchMatmul:
    snake_name: batch_matmul
    inputs:
      a: {}
      b: {}
    arguments:
      transpose_a:
        type: bool
        default: 'False'
      transpose_b:
        type: bool
        default: 'False'
    outputs:
      y: {}
    function_ids:
      BB: 72
    uniq_name: BatchMatmul_BB
    id: 72
  Round:
    snake_name: round
    inputs:
      x: {}
    arguments: {}
    outputs:
      y: {}
    function_ids:
      Empty: 73
    uniq_name: Round_
    id: 73
  Ceil:
    snake_name: ceil
    inputs:
      x: {}
    arguments: {}
    outputs:
      y: {}
    function_ids:
      Empty: 124
    uniq_name: Ceil_
    id: 124
  Floor:
    snake_name: floor
    inputs:
      x: {}
    arguments: {}
    outputs:
      y: {}
    function_ids:
      Empty: 125
    uniq_name: Floor_
    id: 125
  Sin:
    snake_name: sin
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 173
    uniq_name: Sin
    id: 173
  Cos:
    snake_name: cos
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 174
    uniq_name: Cos
    id: 174
  Tan:
    snake_name: tan
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 175
    uniq_name: Tan
    id: 175
  Sinh:
    snake_name: sinh
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 176
    uniq_name: Sinh
    id: 176
  Cosh:
    snake_name: cosh
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 177
    uniq_name: Cosh
    id: 177
  ASin:
    snake_name: asin
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 178
    uniq_name: ASin
    id: 178
  ACos:
    snake_name: acos
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 179
    uniq_name: ACos
    id: 179
  ATan:
    snake_name: atan
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 180
    uniq_name: ATan
    id: 180
  ASinh:
    snake_name: asinh
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 181
    uniq_name: ASinh
    id: 181
  ACosh:
    snake_name: acosh
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 182
    uniq_name: ACosh
    id: 182
  ATanh:
    snake_name: atanh
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 183
    uniq_name: ATanh
    id: 183
Array Manipulation:
  Concatenate:
    snake_name: concatenate
    inputs:
      x:
        variadic: true
    arguments:
      axis:
        type: int64
        default: len(x[0].shape) - 1
    outputs:
      y: {}
    function_ids:
      i: 74
    uniq_name: Concatenate_i
    id: 74
  Split:
    snake_name: split
    inputs:
      x: {}
    arguments:
      axis:
        type: int64
        default: '0'
    outputs:
      y:
        variadic: true
        parameter: true
    function_ids:
      i: 75
    uniq_name: Split_i
    id: 75
  Stack:
    snake_name: stack
    inputs:
      x:
        variadic: true
    arguments:
      axis:
        type: int64
        default: '0'
    outputs:
      y: {}
    function_ids:
      i: 76
    uniq_name: Stack_i
    id: 76
  Slice:
    snake_name: slice
    inputs:
      x: {}
    arguments:
      start:
        type: repeated int64
        default: (0,) * len(x.shape)
      stop:
        type: repeated int64
        default: tuple(x.shape)
      step:
        type: repeated int64
        default: (1,) * len(x.shape)
    outputs:
      y: {}
    function_ids:
      iIiIiI: 77
    uniq_name: Slice_iIiIiI
    id: 77
  Pad:
    snake_name: pad
    inputs:
      x: {}
    arguments:
      pad_width:
        type: repeated int64
      mode:
        type: string
        available_values:
        - constant
        - reflect
        default: '''constant'''
      constant_value:
        type: float
        default: '0'
    outputs:
      y: {}
    function_ids:
      iIif: 123
    uniq_name: Pad_iIif
    id: 123
  Transpose:
    snake_name: transpose
    inputs:
      x: {}
    arguments:
      axes:
        type: repeated int64
    outputs:
      y: {}
    function_ids:
      iI: 78
    uniq_name: Transpose_iI
    id: 78
  Broadcast:
    snake_name: broadcast
    inputs:
      x: {}
    arguments:
      shape:
        type: Shape
    outputs:
      y: {}
    function_ids:
      iI: 79
    uniq_name: Broadcast_iI
    id: 79
  BroadcastTo:
    snake_name: broadcast_to
    inputs:
      x: {}
      y: {}
    arguments:
      axis:
        type: int64
        default: -1
    outputs:
      z: {}
    function_ids:
      i: 184
    uniq_name: BroadcastTo_i
    id: 184
  OneHot:
    snake_name: one_hot
    inputs:
      x:
        template: TI
    arguments:
      shape:
        type: Shape
    outputs:
      output: {}
    function_ids:
      iI: 80
    uniq_name: OneHot_iI
    id: 80
  Flip:
    snake_name: flip
    inputs:
      x: {}
    arguments:
      axes:
        type: repeated int64
        default: '[len(x.shape) - 1]'
    outputs:
      y: {}
    function_ids:
      iI: 81
    uniq_name: Flip_iI
    id: 81
  Shift:
    snake_name: shift
    inputs:
      x: {}
    arguments:
      shifts:
        type: repeated int64
        default: (0,) * len(x.shape)
      border_mode:
        type: string
        available_values:
        - nearest
        - reflect
        default: '''nearest'''
    outputs:
      y: {}
    function_ids:
      iIi: 82
    uniq_name: Shift_iIi
    id: 82
  Sort:
    snake_name: sort
    inputs:
      x: {}
    arguments:
      axis:
        type: int64
        default: '-1'
      reverse:
        type: bool
        default: 'False'
      with_index:
        type: bool
        default: 'False'
      only_index:
        type: bool
        default: 'False'
    outputs:
      y:
        variadic: true
        parameter: true
    function_ids:
      iBBB: 129
    uniq_name: Sort_iBBB
    id: 129
  Reshape:
    snake_name: reshape
    inputs:
      x: {}
    arguments:
      shape:
        type: Shape
      inplace:
        type: bool
        default: 'True'
    outputs:
      y: {}
    function_ids:
      iI: 83
      iIB: 126
    uniq_name: Reshape_iIB
    id: 126
  MatrixDiag:
    snake_name: matrix_diag
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 84
    uniq_name: MatrixDiag
    id: 84
  MatrixDiagPart:
    snake_name: matrix_diag_part
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 85
    uniq_name: MatrixDiagPart
    id: 85
Signal Processing:
  Interpolate:
    snake_name: interpolate
    inputs:
      x: {}
    arguments:
      output_size:
        type: repeated int64
      mode:
        type: string
        available_values:
        - nearest
        - linear
      align_corners:
        type: bool
        default: False if mode == 'nearest' else True
    outputs:
      y: {}
    function_ids:
      iIiB: 127
    uniq_name: Interpolate_iIiB
    id: 127
  FFT:
    snake_name: fft
    inputs:
      x: {}
    arguments:
      signal_ndim:
        type: int64
      normalized:
        type: bool
        default: 'False'
    outputs:
      y: {}
    function_ids:
      iB: 158
    uniq_name: FFT_iB
    id: 158
  IFFT:
    snake_name: ifft
    inputs:
      x: {}
    arguments:
      signal_ndim:
        type: int64
      normalized:
        type: bool
        default: 'False'
    outputs:
      y: {}
    function_ids:
      iB: 159
    uniq_name: IFFT_iB
    id: 159
Stochasticity:
  Dropout:
    snake_name: dropout
    inputs:
      x: {}
    arguments:
      p:
        type: double
        default: '0.5'
      seed:
        type: int64
        default: '-1'
    outputs:
      y: {}
    function_ids:
      fi: 86
    uniq_name: Dropout_fi
    id: 86
  TopKData:
    snake_name: top_k_data
    inputs:
      x: {}
    arguments:
      k:
        type: int64
      abs:
        type: bool
        default: 'False'
      reduce:
        type: bool
        default: 'True'
      base_axis:
        type: int64
        default: '1'
    outputs:
      y: {}
    function_ids:
      iBBi: 87
    uniq_name: TopKData_iBBi
    id: 87
  TopKGrad:
    snake_name: top_k_grad
    inputs:
      x: {}
    arguments:
      k:
        type: int64
      abs:
        type: bool
        default: 'False'
      base_axis:
        type: int64
        default: '1'
    outputs:
      y: {}
    function_ids:
      iBi: 88
    uniq_name: TopKGrad_iBi
    id: 88
  Rand:
    snake_name: rand
    inputs: {}
    arguments:
      low:
        type: float
        default: '0'
      high:
        type: float
        default: '1'
      shape:
        type: Shape
        default: '[]'
      seed:
        type: int64
        default: '-1'
    outputs:
      y: {}
    function_ids:
      ffiIi: 89
    uniq_name: Rand_ffiIi
    id: 89
  Randint:
    snake_name: randint
    inputs: {}
    arguments:
      low:
        type: int64
        default: '0'
      high:
        type: int64
        default: '1'
      shape:
        type: Shape
        default: '[]'
      seed:
        type: int64
        default: '-1'
    outputs:
      y:
        template: TI
    function_ids:
      iiiIi: 90
    uniq_name: Randint_iiiIi
    id: 90
  Randn:
    snake_name: randn
    inputs: {}
    arguments:
      mu:
        type: float
        default: '0'
      sigma:
        type: float
        default: '1'
      shape:
        type: Shape
        default: '[]'
      seed:
        type: int64
        default: '-1'
    outputs:
      y: {}
    function_ids:
      ffiIi: 91
    uniq_name: Randn_ffiIi
    id: 91
  RandomCrop:
    snake_name: random_crop
    inputs:
      x: {}
    arguments:
      shape:
        type: Shape
        default: x.shape
      base_axis:
        type: int64
        default: '1'
      seed:
        type: int64
        default: '-1'
    outputs:
      y: {}
    function_ids:
      iIii: 92
    uniq_name: RandomCrop_iIii
    id: 92
  RandomFlip:
    snake_name: random_flip
    inputs:
      x: {}
    arguments:
      axes:
        type: repeated int64
        default: '[len(x.shape) - 1]'
      base_axis:
        type: int64
        default: '1'
      seed:
        type: int64
        default: '-1'
    outputs:
      y: {}
    function_ids:
      iIii: 93
    uniq_name: RandomFlip_iIii
    id: 93
  RandomShift:
    snake_name: random_shift
    inputs:
      x: {}
    arguments:
      shifts:
        type: repeated int64
        default: (0,) * len(x.shape)
      border_mode:
        type: string
        available_values:
        - nearest
        - reflect
        default: '''nearest'''
      base_axis:
        type: int64
        default: '1'
      seed:
        type: int64
        default: '-1'
    outputs:
      y: {}
    function_ids:
      iIiii: 94
    uniq_name: RandomShift_iIiii
    id: 94
  ImageAugmentation:
    snake_name: image_augmentation
    inputs:
      x: {}
    arguments:
      shape:
        type: Shape
        default: x.shape
      pad:
        type: Shape
        default: (0, 0)
      min_scale:
        type: float
        default: '1.0'
      max_scale:
        type: float
        default: '1.0'
      angle:
        type: float
        default: '0.0'
      aspect_ratio:
        type: float
        default: '1.0'
      distortion:
        type: float
        default: '0.0'
      flip_lr:
        type: bool
        default: 'False'
      flip_ud:
        type: bool
        default: 'False'
      brightness:
        type: float
        default: '0.0'
      brightness_each:
        type: bool
        default: 'False'
      contrast:
        type: float
        default: '1.0'
      contrast_center:
        type: float
        default: '0.0'
      contrast_each:
        type: bool
        default: 'False'
      noise:
        type: float
        default: '0.0'
      seed:
        type: int64
        default: '-1'
    outputs:
      y: {}
    function_ids:
      iIiIfffffBBfBffBfi: 95
    uniq_name: ImageAugmentation_iIiIfffffBBfBffBfi
    id: 95
Loss Functions:
  SigmoidCrossEntropy:
    snake_name: sigmoid_cross_entropy
    inputs:
      x:
        parameter: true
      target:
        template: TI
        parameter: true
    outputs:
      y: {}
    function_ids:
      Empty: 96
    uniq_name: SigmoidCrossEntropy
    id: 96
  BinaryCrossEntropy:
    snake_name: binary_cross_entropy
    inputs:
      x: {}
      target: {}
    outputs:
      y: {}
    function_ids:
      Empty: 97
    uniq_name: BinaryCrossEntropy
    id: 97
  SoftmaxCrossEntropy:
    snake_name: softmax_cross_entropy
    inputs:
      x:
        parameter: true
      target:
        template: TI
        parameter: true
    arguments:
      axis:
        type: int64
        default: len(x.shape) - 1
    outputs:
      y: {}
    function_ids:
      i: 98
    uniq_name: SoftmaxCrossEntropy_i
    id: 98
  CategoricalCrossEntropy:
    snake_name: categorical_cross_entropy
    inputs:
      x:
        parameter: true
      target:
        template: TI
        parameter: true
    arguments:
      axis:
        type: int64
        default: len(x.shape) - 1
    outputs:
      y: {}
    function_ids:
      i: 99
    uniq_name: CategoricalCrossEntropy_i
    id: 99
  SquaredError:
    snake_name: squared_error
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    function_ids:
      Empty: 100
    uniq_name: SquaredError
    id: 100
  AbsoluteError:
    snake_name: absolute_error
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    function_ids:
      Empty: 101
    uniq_name: AbsoluteError
    id: 101
  HuberLoss:
    snake_name: huber_loss
    inputs:
      x0: {}
      x1: {}
    arguments:
      delta:
        type: float
        default: '1.0'
    outputs:
      y: {}
    function_ids:
      f: 102
    uniq_name: HuberLoss_f
    id: 102
  EpsilonInsensitiveLoss:
    snake_name: epsilon_insensitive_loss
    inputs:
      x0: {}
      x1: {}
    arguments:
      epsilon:
        type: float
    outputs:
      y: {}
    function_ids:
      f: 103
    uniq_name: EpsilonInsensitiveLoss_f
    id: 103
  KLMultinomial:
    snake_name: kl_multinomial
    inputs:
      p: {}
      q: {}
    arguments:
      base_axis:
        type: int64
        default: '1'
    outputs:
      D: {}
    function_ids:
      i: 104
    uniq_name: KLMultinomial_i
    id: 104
Quantization Neural Network Layers:
  BinarySigmoid:
    snake_name: binary_sigmoid
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 105
    uniq_name: BinarySigmoid
    id: 105
  BinaryTanh:
    snake_name: binary_tanh
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 106
    uniq_name: BinaryTanh
    id: 106
  BinaryConnectAffine:
    snake_name: binary_connect_affine
    inputs:
      x: {}
      weight:
        parameter: true
      binary_weight:
        parameter: true
      bias:
        optional: true
        parameter: true
    arguments:
      base_axis:
        type: int64
        default: '1'
    outputs:
      y: {}
    function_ids:
      i: 107
    uniq_name: BinaryConnectAffine_i
    id: 107
  BinaryConnectConvolution:
    snake_name: binary_connect_convolution
    inputs:
      x: {}
      weight:
        parameter: true
      binary_weight:
        parameter: true
      bias:
        optional: true
        parameter: true
    arguments:
      base_axis:
        type: int64
        default: '1'
      pad:
        type: Shape
        default: (0,) * (len(x.shape) - (base_axis+1))
      stride:
        type: Shape
        default: (1,) * (len(x.shape) - (base_axis+1))
      dilation:
        type: Shape
        default: (1,) * (len(x.shape) - (base_axis+1))
      group:
        type: int64
        default: '1'
    outputs:
      y: {}
    function_ids:
      iiIiIiIi: 108
    uniq_name: BinaryConnectConvolution_iiIiIiIi
    id: 108
  BinaryWeightAffine:
    snake_name: binary_weight_affine
    inputs:
      x: {}
      weight:
        parameter: true
      binary_weight:
        parameter: true
      alpha:
        parameter: true
      bias:
        optional: true
        parameter: true
    arguments:
      base_axis:
        type: int64
        default: '1'
    outputs:
      y: {}
    function_ids:
      i: 109
    uniq_name: BinaryWeightAffine_i
    id: 109
  BinaryWeightConvolution:
    snake_name: binary_weight_convolution
    inputs:
      x: {}
      weight:
        parameter: true
      binary_weight:
        parameter: true
      alpha:
        parameter: true
      bias:
        optional: true
        parameter: true
    arguments:
      base_axis:
        type: int64
        default: '1'
      pad:
        type: Shape
        default: (0,) * (len(x.shape) - (base_axis+1))
      stride:
        type: Shape
        default: (1,) * (len(x.shape) - (base_axis+1))
      dilation:
        type: Shape
        default: (1,) * (len(x.shape) - (base_axis+1))
      group:
        type: int64
        default: '1'
    outputs:
      y: {}
    function_ids:
      iiIiIiIi: 110
    uniq_name: BinaryWeightConvolution_iiIiIiIi
    id: 110
  INQAffine:
    snake_name: inq_affine
    inputs:
      x: {}
      weight:
        parameter: true
      indicator_fixedweights:
        template: TI
        parameter: true
      bias:
        optional: true
        parameter: true
    arguments:
      base_axis:
        type: int64
        default: '1'
      num_bits:
        type: int64
        default: '4'
      inq_iterations:
        type: repeated int64
        default: ()
      selection_algorithm:
        type: string
        available_values:
        - largest_abs
        - random
        default: '''largest_abs'''
      seed:
        type: int64
        default: '-1'
    outputs:
      y: {}
    function_ids:
      iiiIii: 111
    uniq_name: INQAffine_iiiIii
    id: 111
  INQConvolution:
    snake_name: inq_convolution
    inputs:
      x: {}
      weight:
        parameter: true
      indicator_fixedweights:
        template: TI
        parameter: true
      bias:
        optional: true
        parameter: true
    arguments:
      base_axis:
        type: int64
        default: '1'
      pad:
        type: Shape
        default: (0,) * (len(x.shape) - (base_axis+1))
      stride:
        type: Shape
        default: (1,) * (len(x.shape) - (base_axis+1))
      dilation:
        type: Shape
        default: (1,) * (len(x.shape) - (base_axis+1))
      group:
        type: int64
        default: '1'
      num_bits:
        type: int64
        default: '4'
      inq_iterations:
        type: repeated int64
        default: ()
      selection_algorithm:
        type: string
        available_values:
        - largest_abs
        - random
        default: '''largest_abs'''
      seed:
        type: int64
        default: '-1'
    outputs:
      y: {}
    function_ids:
      iiIiIiIiiiIii: 112
    uniq_name: INQConvolution_iiIiIiIiiiIii
    id: 112
  FixedPointQuantize:
    snake_name: fixed_point_quantize
    inputs:
      x: {}
    arguments:
      sign:
        type: bool
        default: 'True'
      n:
        type: int64
        default: '8'
      delta:
        type: float
        default: '0.0625'
      ste_fine_grained:
        type: bool
        default: 'True'
    outputs:
      y: {}
    function_ids:
      BifB: 113
    uniq_name: FixedPointQuantize_BifB
    id: 113
  Pow2Quantize:
    snake_name: pow2_quantize
    inputs:
      x: {}
    arguments:
      sign:
        type: bool
        default: 'True'
      with_zero:
        type: bool
        default: 'True'
      n:
        type: int64
        default: '8'
      m:
        type: int64
        default: '1'
      ste_fine_grained:
        type: bool
        default: 'True'
    outputs:
      y: {}
    function_ids:
      BBiiB: 114
    uniq_name: Pow2Quantize_BBiiB
    id: 114
  Prune:
    snake_name: prune
    inputs:
      x: {}
    arguments:
      rate:
        type: float
        default: '0.9'
    outputs:
      y: {}
    function_ids:
      f: 135
    uniq_name: Prune_f
    id: 135
Validation:
  TopNError:
    snake_name: top_n_error
    inputs:
      x: {}
      target:
        template: TI
    arguments:
      axis:
        type: int64
        default: len(x.shape) - 1
      n:
        type: int64
        default: '1'
    outputs:
      output: {}
    function_ids:
      ii: 115
    uniq_name: TopNError_ii
    id: 115
  BinaryError:
    snake_name: binary_error
    inputs:
      x: {}
      target: {}
    outputs:
      output: {}
    function_ids:
      Empty: 116
    uniq_name: BinaryError
    id: 116
  ConfusionMatrix:
    snake_name: confusion_matrix
    inputs:
      x: {}
      target:
        template: TI
    arguments:
      axis:
        type: int64
        default: len(x.shape) - 1
    outputs:
      output: {}
    function_ids:
      i: 117
    uniq_name: ConfusionMatrix_i
    id: 117
Unsupported, Special Use:
  VATNoise:
    snake_name: vat_noise
    inputs:
      x: {}
      w: {}
    arguments:
      base_axis:
        type: int64
        default: '1'
      eps:
        type: float
        default: '1.0'
    outputs:
      y: {}
    function_ids:
      if: 118
    uniq_name: VATNoise_if
    id: 118
  Unlink:
    snake_name: unlink
    inputs:
      x: {}
    outputs:
      y: {}
    function_ids:
      Empty: 119
    uniq_name: Unlink
    id: 119
  Sink:
    snake_name: sink
    inputs:
      x:
        variadic: true
    arguments:
      one_input_grad:
        type: bool
        default: 'True'
    outputs:
      y: {}
    function_ids:
      B: 120
    uniq_name: Sink_B
    id: 120
  NmsDetection2d:
    snake_name: nms_detection2d
    inputs:
      x: {}
    arguments:
      thresh:
        type: float
        default: 0.5
      nms:
        type: float
        default: 0.45
      nms_per_class:
        type: bool
        default: true
    outputs:
      y: {}
    function_ids:
      ffB: 231
    uniq_name: NmsDetection2d_ffB
    id: 231
